(ns leiningen.base.storage-provider
  (:require [clojure.string :as string]
            [clojure.java.io :as io]
            [leiningen.base.storage-provider.textblockstore :refer :all])
  (:import [java.io StringReader PushbackReader]))

(defn update-values [f m]
  (into {} (for [[k v] m] [k (f k v)])))

(defn- print-dup-str [x]
  (binding [*print-dup* true]
    (prn-str x)))

(defn index-coll
  ([f coll] (index-coll f {} coll))
  ([f base-coll coll]
   (into base-coll (for [x coll] [(f x) x]))))



;; Provider


(defprotocol FormStorageProvider
  (store [this s])
  (query [this sym]))

(defn generate-declare-form [nsname data]
  (let [defed-syms (sort (map #(-> % :clj/def symbol name)
                              (filter :clj/def data)))]
    {:clj/ns nsname
     :clj/op "declare"
     :clj/def defed-syms
     :clj/form (with-meta (conj (map symbol defed-syms) 'declare) {::autogenerated true})}))

(defn sort-forms [coll]
  (sort-by #(case (:clj/op %) "ns" "0" "declare" "1" (:clj/def %)) coll))

(defn format-forms [current-ns item]
  (sort-forms (conj item (generate-declare-form current-ns item))))

(defn format-namespaces [data]
  (update-values (fn [k v]
                   (clojure.string/join "\n" (map #(print-dup-str (:clj/form %))
                                                    (format-forms k v))))
                 data))

(defn merge-with-existing-files [storage analyze-fn m]
  (let [nss (filter (partial exists? storage) (keys m))
        joined-forms (string/join "\n\n" (map (partial read-ns storage) nss))
        existing-m (when-not (empty? joined-forms)
                     (group-by :clj/ns (analyze-fn (StringReader. joined-forms))))]
    (if (empty? existing-m)
      m
      (merge-with #(vals (merge (index-coll :clj/def %1)
                                (index-coll :clj/def %2)))
                  existing-m
                  m))))

(defn generate-writes [storage analyze-fn m]
  (->> m
       (group-by :clj/ns)
       (merge-with-existing-files storage analyze-fn)
       format-namespaces
       (reduce #(let [[k v] %2]
                  (into %1 (generate-ns-writes storage k v))) [])))



(defrecord FileStorageProvider [storage analyze-fn]
  FormStorageProvider
  (store [this forms] (generate-writes storage analyze-fn forms))
  (query [this sym]
         (let [[n s] (string/split sym #"/")]
           (when (exists? storage n)
             (let [forms (analyze-fn (read-ns storage n))]
               (->> (if s
                      (filter #(= sym (str (:clj/def %))) forms)
                      forms)
                    (filter #(not (::autogenerated (meta (:clj/form %)))))))))))
